# A mathematical treatment of integrated Ca dynamics within the ventricular myocyte
# 
# ABSTRACT: We have developed a detailed mathematical model for Ca2+ handling and
# ionic currents in the rabbit ventricular myocyte. The objective was to develop
# a model that: 1), accurately reflects Ca-dependent Ca release; 2), uses
# realistic parameters, particularly those that concern Ca transport from the
# cytosol; 3), comes to steady state; 4), simulates basic excitation-contraction
# coupling phenomena; and 5), runs on a normal desktop computer. The model
# includes the following novel features: 1), the addition of a subsarcolemmal
# compartment to the other two commonly formulated cytosolic compartments
# (junctional and bulk) because ion channels in the membrane sense ion
# concentrations that differ from bulk; 2), the use of realistic cytosolic Ca
# buffering parameters; 3), a reversible sarcoplasmic reticulum (SR) Ca pump; 4),
# a scheme for Na-Ca exchange transport that is [Na]i dependent and
# allosterically regulated by [Ca]i; and 5), a practical model of SR Ca release
# including both inactivation/adaptation and SR Ca load dependence. The data
# describe normal electrical activity and Ca handling characteristics of the
# cardiac myocyte and the SR Ca load dependence of these processes. The model
# includes a realistic balance of Ca removal mechanisms (e.g., SR Ca pump versus
# Na-Ca exchange), and the phenomena of rest decay and frequency-dependent
# inotropy. A particular emphasis is placed upon reproducing the nonlinear
# dependence of gain and fractional SR Ca release upon SR Ca load. We conclude
# that this model is more robust than many previously existing models and
# reproduces many experimental results using parameters based largely on
# experimental measurements in myocytes.
# 
# The complete original paper reference is cited below:
# 
# A mathematical treatment of integrated Ca dynamics within the ventricular
# myocyte, Thomas R. Shannon, Fei Wang, Jose Puglisi, Christopher Weber and
# Donald M. Bers, 2004,Biophysical Journal, 87, 3351-3371.PubMed ID: 15347581
# 

# gotran file generated by cellml2gotran from shannon_wang_puglisi_weber_bers_2004_a.cellml

##states("Ina h gate",
##       h = 9.867005e-1)
##
##states("Ina j gate",
##       j = 9.91562e-1)
##
##states("Ina m gate",
##       m = 1.405627e-3)
##
##states("Ikr xr gate",
##       Xr = 8.641386e-3)
##
##states("Iks xs gate",
##       Xs = 5.412034e-3)
##
##states("Itos x gate",
##       X_tos = 4.051574e-3)
##
##states("Itos y gate",
##       Y_tos = 9.945511e-1)
##
##states("Itos r gate",
##       R_tos = 0.9946)
##
##states("Itof x gate",
##       X_tof = 4.051574e-3)
##
##states("Itof y gate",
##       Y_tof = 9.945511e-1)

states("Ical d gate",
       d = 7.175662e-6)

states("Ical f gate",
       f = 1.000681)

states("Ical fca gate",
       fCaB_SL = 1.452605e-2,
       fCaB_jct = 2.421991e-2)

##states("Jrel sr",
##       R = 8.884332e-1,
##       O = 8.156628e-7,
##       I = 1.024274e-7)

##states("Cytosolic ca buffer",
##       Ca_TroponinC = 8.773191e-3,
##       Ca_TroponinC_Ca_Mg = 1.078283e-1,
##       Mg_TroponinC_Ca_Mg = 1.524002e-2,
##       Ca_Calmodulin = 2.911916e-4,
##       Ca_Myosin = 1.298754e-3,
##       Mg_Myosin = 1.381982e-1,
##       Ca_SRB = 2.143165e-3)
##
##states("Na buffer",
##       Na_jct_buf = 3.539892,
##       Na_SL_buf = 7.720854e-1,
##       Na_jct = 8.80329,
##       Na_SL = 8.80733,
##       Nai = 8.80853)
##
##states("Ca buffer",
##       Ca_Calsequestrin = 1.242988,
##       Ca_SLB_SL = 1.110363e-1,
##       Ca_SLB_jct = 9.566355e-3,
##       Ca_SLHigh_SL = 7.297378e-2,
##       Ca_SLHigh_jct = 7.347888e-3,
##       Ca_SR = 5.545201e-1,
##       Ca_jct = 1.737475e-4,
##       Ca_SL = 1.031812e-4,
##       Cai = 8.597401e-5)

##states("Cell",
##       V = -8.556885e1)
parameters("PKH",
  V = -85.,
  dV = 14.5, # term in d-gate (V+14.5) exponential 
  Na_jct = 8.80329,
  Na_SL = 8.80733,
  Ca_jct = 1.737475e-4,
  Ca_SL = 1.031812e-4)

parameters("Model parameters",
           Ko = 5.4,
           Nao = 140,
           Cao = 1.8,
           Clo = 150,
           Ki = 135,
           Mgi = 1,
           Cli = 15,
           Rgas = 8314.3,
           T = 310,
           F = 96485,
           Cm = 1.381e-10,
           cell_length = 100,
           cell_radius = 10.25)

##parameters("Ina",
##           G_INa = 16,
##           Fx_Na_jct = 0.11,
##           Fx_Na_SL = 0.89)
##
##parameters("Inab",
##           G_NaBk = 0.297e-3,
##           Fx_NaBk_jct = 0.11,
##           Fx_NaBk_SL = 0.89)
##
##parameters("Inak",
##           H_NaK = 4,
##           Km_Nai = 11,
##           Km_Ko = 1.5,
##           I_NaK_max = 1.90719,
##           Fx_NaK_jct = 0.11,
##           Fx_NaK_SL = 0.89)
##
##parameters("Iks",
##           Fx_Ks_jct = 0.11,
##           Fx_Ks_SL = 0.89,
##           pKNa = 0.01833)
##
##parameters("Ikp",
##           g_Kp = 0.001)
##
##parameters("Itos",
##           G_tos = 0.06)
##
##parameters("Itof",
##           G_tof = 0.02)
##
##parameters("Icl ca",
##           G_Cl = 0.109625,
##           Kd_ClCa = 0.1,
##           Fx_Cl_jct = 0.11,
##           Fx_Cl_SL = 0.89)
##
##parameters("Iclb",
##           G_ClBk = 0.009)
##
##parameters("Inaca",
##           V_max = 9,
##           Fx_NCX_jct = 0.11,
##           Fx_NCX_SL = 0.89,
##           Q10_NCX = 1.57,
##           K_mNai = 12.29,
##           K_mCao = 1.3,
##           K_mNao = 87.5,
##           K_mCai = 0.00359,
##           Kd_act = 0.000256,
##           ksat = 0.27,
##           eta = 0.35,
##           HNa = 3)
##
##parameters("Icap",
##           Fx_SLCaP_jct = 0.11,
##           Fx_SLCaP_SL = 0.89,
##           Q10_SLCaP = 2.35,
##           Km = 0.0005,
##           H = 1.6,
##           V_maxAF = 0.0673)
##
##parameters("Icab",
##           G_CaBk = 0.0002513,
##           Fx_CaBk_jct = 0.11,
##           Fx_CaBk_SL = 0.89)
##
##parameters("Jrel sr",
##           Max_SR = 15,
##           Min_SR = 1,
##           EC50_SR = 0.45,
##           ks = 25,
##           koCa = 10,
##           kom = 0.06,
##           kiCa = 0.5,
##           kim = 0.005,
##           HSR = 2.5)
##
##parameters("Jleak sr",
##           KSRleak = 5.348e-6)
##
##parameters("Jpump sr",
##           V_max_Jpump = 5.3114e-3,
##           Q10_SRCaP = 2.6,
##           Kmf = 0.000246,
##           Kmr = 1.7,
##           H_Jpump = 1.787)
##
##parameters("Cytosolic ca buffer",
##           Bmax_TroponinC = 0.07,
##           Bmax_TroponinC_Ca_Mg_Ca = 0.14,
##           Bmax_TroponinC_Ca_Mg_Mg = 0.14,
##           Bmax_Calmodulin = 0.024,
##           Bmax_Myosin_Ca = 0.14,
##           Bmax_Myosin_Mg = 0.14,
##           Bmax_SRB = 0.0171,
##           kon_TroponinC = 32.7,
##           kon_TroponinC_Ca_Mg_Ca = 2.37,
##           kon_TroponinC_Ca_Mg_Mg = 3e-3,
##           kon_Calmodulin = 34,
##           kon_Myosin_Ca = 13.8,
##           kon_Myosin_Mg = 15.7e-3,
##           kon_SRB = 100,
##           koff_TroponinC = 19.6e-3,
##           koff_TroponinC_Ca_Mg_Ca = 0.032e-3,
##           koff_TroponinC_Ca_Mg_Mg = 3.33e-3,
##           koff_Calmodulin = 238e-3,
##           koff_Myosin_Ca = 0.46e-3,
##           koff_Myosin_Mg = 0.057e-3,
##           koff_SRB = 60e-3)
##
parameters("Ical",
           PCa = 5.4e-4,
           PNa = 1.5e-8,
           PK = 2.7e-7,
           Fx_ICaL_jct = 0.9,
           Fx_ICaL_SL = 0.1,
           gamma_Cai = 0.341,
           gamma_Cao = 0.341,
           gamma_Nai = 0.75,
           gamma_Nao = 0.75,
           gamma_Ki = 0.75,
           gamma_Ko = 0.75,
           Q10_CaL = 1.8)

####parameters("Na buffer",
####           Bmax_SL = 1.65,
####           Bmax_jct = 7.561,
####           kon = 0.0001,
####           koff = 1e-3)
####
####parameters("Ca buffer",
####           Bmax_SLB_SL = 0.0374,
####           Bmax_SLB_jct = 0.0046,
####           Bmax_SLHigh_SL = 0.0134,
####           Bmax_SLHigh_jct = 0.00165,
####           Bmax_Calsequestrin = 0.14,
####           kon_SL = 100,
####           kon_Calsequestrin = 100,
####           koff_SLB = 1.3,
####           koff_SLHigh = 30e-3,
####           koff_Calsequestrin = 65)
####
####parameters("Cell",
####           stim_start = 100,
####           stim_period = 1000,
####           stim_duration = 5,
####           stim_amplitude = 9.5)
####
####component("Model parameters")
####Vol_Cell = 3.141592654*(cell_radius/1000)**two*cell_length/1000**three
####Vol_SR = 0.035*Vol_Cell
####Vol_SL = 0.02*Vol_Cell
####Vol_jct = 0.0539*0.01*Vol_Cell
##Vol_myo = 0.65*Vol_Cell
##
##component("Reversal potentials")
##E_Na_jct = Rgas*T/F*log(Nao/Na_jct)
##E_Na_SL = Rgas*T/F*log(Nao/Na_SL)
##E_Ca_jct = Rgas*T/(two*F)*log(Cao/Ca_jct)
##E_Ca_SL = Rgas*T/(two*F)*log(Cao/Ca_SL)
##E_K = Rgas*T/F*log(Ko/Ki)
##E_Cl = Rgas*T/F*log(Cli/Clo)
##
##component("Ina")
##openProb = m**three*h*j
##i_Na_jct = Fx_Na_jct*G_INa*openProb*(V - E_Na_jct)
##i_Na_SL = Fx_Na_SL*G_INa*openProb*(V - E_Na_SL)
##i_Na = i_Na_jct + i_Na_SL
##
##component("Ina h gate")
##alpha_h = Conditional(Lt(V, -40), 0.135*exp((80 + V)/-6.8), 0)
##beta_h = Conditional(Lt(V, -40), 3.56*exp(0.079*V) + 3.1e5*exp(0.35*V), one/(0.13*(one + exp((V + 10.66)/-11.1))))
##
##component("Ina j gate")
##alpha_j = Conditional(Lt(V, -40), (-1.2714e5*exp(0.2444*V) - 3.474e-5*exp(-0.04391*V))*(V + 37.78)/one/(one + exp(0.311*(V + 79.23))), 0)
##beta_j = Conditional(Lt(V, -40), 0.1212*exp(-0.01052*V)/(one + exp(-0.1378*(V + 40.14))), 0.3*exp(-2.535e-7*V)/(one + exp(-0.1*(V + 32))))
##
##component("Ina m gate")
##alpha_m = 0.32*(V + 47.13)/one/(one - exp(-0.1*(V + 47.13)))
##beta_m = 0.08*exp(-V/11)
##
##component("Inab")
##i_Nab_jct = Fx_NaBk_jct*G_NaBk*(V - E_Na_jct)
##i_Nab_SL = Fx_NaBk_SL*G_NaBk*(V - E_Na_SL)
##i_Nab = i_Nab_jct + i_Nab_SL
##
##component("Inak")
##sigma = (exp(Nao/67.3) - one)/7
##f_NaK = one/(one + 0.1245*exp(-0.1*V*F/(Rgas*T)) + 0.0365*sigma*exp(-V*F/(Rgas*T)))
##i_NaK_jct = Fx_NaK_jct*I_NaK_max*f_NaK/(one + (Km_Nai/Na_jct)**H_NaK)*Ko/(Ko + Km_Ko)
##i_NaK_SL = Fx_NaK_SL*I_NaK_max*f_NaK/(one + (Km_Nai/Na_SL)**H_NaK)*Ko/(Ko + Km_Ko)
##i_NaK = i_NaK_jct + i_NaK_SL
##
##component("Ikr xr gate")
##Xr_infinity = one/(one + exp(-(50 + V)/7.5))
##tau_Xr = one/(0.00138*(V + 7)/(one - exp(-0.123*(V + 7))) + 0.00061*(V + ten)/(exp(0.145*(V + ten)) - one))
##
##component("Ikr rr gate")
##Rr = one/(one + exp((33 + V)/22.4))
##
##component("Iks")
##pCa_jct = -log(Ca_jct/one) + three
##pCa_SL = -log(Ca_SL/one) + three
##G_Ks_jct = 0.07*(0.057 + 0.19/(one + exp((-7.2 + pCa_jct)/0.6)))
##G_Ks_SL = 0.07*(0.057 + 0.19/(one + exp((-7.2 + pCa_SL)/0.6)))
##E_Ks = Rgas*T/F*log((Ko + pKNa*Nao)/(Ki + pKNa*Nai))
##i_Ks_jct = Fx_Ks_jct*G_Ks_jct*Xs**two*(V - E_Ks)
##i_Ks_SL = Fx_Ks_SL*G_Ks_SL*Xs**two*(V - E_Ks)
##i_Ks = i_Ks_jct + i_Ks_SL
##
##component("Iks xs gate")
##Xs_infinity = one/(one + exp(-(V - 1.5)/16.7))
##tau_Xs = one/(7.19e-5*(V + 30)/(one - exp(-0.148*(V + 30))) + 1.31e-4*(V + 30)/(-one + exp(0.0687*(V + 30))))
##
##component("Ikp")
##i_Kp = g_Kp*(V - E_K)/(one + exp(7.488 - V/5.98))
##
##component("Itos")
##i_tos = G_tos*X_tos*(Y_tos + 0.5*R_tos)*(V - E_K)
##
##component("Itos x gate")
##X_tos_infinity = one/(one + exp(-(V + three)/15))
##tau_X_tos = 9/(one + exp((V + three)/15)) + 0.5
##
##component("Itos y gate")
##Y_tos_infinity = one/(one + exp((V + 33.5)/ten))
##tau_Y_tos = 3000/(one + exp((V + 60)/ten)) + 30
##
##component("Itos r gate")
##R_tos_infinity = one/(one + exp((V + 33.5)/ten))
##tau_R_tos = 2.8e3/(one + exp((V + 60)/ten)) + 220
##
##component("Itof")
##i_tof = G_tof*X_tof*Y_tof*(V - E_K)
##
##component("Itof x gate")
##X_tof_infinity = one/(one + exp(-(V + three)/15))
##tau_X_tof = 3.5*exp(-(V/30)**two) + 1.5
##
##component("Itof y gate")
##Y_tof_infinity = one/(one + exp((V + 33.5)/ten))
##tau_Y_tof = 20/(one + exp((V + 33.5)/ten)) + 20
##
##component("Ik1 k1 gate")
##alpha_K1 = 1.02/(one + exp(0.2385*(V - (E_K + 59.215))))
##beta_K1 = (0.49124*exp(0.08032*(V - E_K + 5.476)) + one*exp(0.06175*(V - (E_K + 594.31))))/(one + exp(-0.5143*(V - E_K + 4.753)))
##K1_infinity = alpha_K1/(alpha_K1 + beta_K1)
##
##component("Icl ca")
##i_Cl_Ca = G_Cl*(V - E_Cl)*(Fx_Cl_jct/(one + Kd_ClCa/Ca_jct) + Fx_Cl_SL/(one + Kd_ClCa/Ca_SL))
##
##component("Iclb")
##i_Clb = G_ClBk*(V - E_Cl)

component("Ical d gate")
d_infinity = one/(one + exp(-(V + dV  )/6))
tau_d = one*d_infinity*(one - exp(-(V + dV  )/6))/(0.035*(V + dV  ))

component("Ical f gate")
f_infinity = one/(one + exp((V + 35.06)/3.6)) + 0.6/(one + exp((50 - V)/20))
tau_f = one/(0.0197*exp(-(0.0337*(V + 14.5))**two) + 0.02)

component("Ical fca gate")
fCa_SL = one - fCaB_SL
fCa_jct = one - fCaB_jct
#monitor(fCa_SL) 
#monitor(fCa_jct) 

##component("Inaca")
##temp_jct = (exp(eta*V*F/(Rgas*T))*Na_jct**HNa*Cao - exp((eta - one)*V*F/(Rgas*T))*Nao**HNa*Ca_jct)/(one + ksat*exp((eta - one)*V*F/(Rgas*T)))
##temp_SL = (exp(eta*V*F/(Rgas*T))*Na_SL**HNa*Cao - exp((eta - one)*V*F/(Rgas*T))*Nao**HNa*Ca_SL)/(one + ksat*exp((eta - one)*V*F/(Rgas*T)))
##Q_NCX = Q10_NCX**((T - 310)/ten)
##Ka_SL = one/(one + (Kd_act/Ca_SL)**three)
##Ka_jct = one/(one + (Kd_act/Ca_jct)**three)
##i_NaCa_jct = Fx_NCX_jct*V_max*Ka_jct*Q_NCX*temp_jct/(K_mCai*Nao**HNa*(one + (Na_jct/K_mNai)**HNa) + K_mNao**HNa*Ca_jct*(one + Ca_jct/K_mCai) + K_mCao*Na_jct**HNa + Na_jct**HNa*Cao + Nao**HNa*Ca_jct)
##i_NaCa_SL = Fx_NCX_SL*V_max*Ka_SL*Q_NCX*temp_SL/(K_mCai*Nao**HNa*(one + (Na_SL/K_mNai)**HNa) + K_mNao**HNa*Ca_SL*(one + Ca_SL/K_mCai) + K_mCao*Na_SL**HNa + Na_SL**HNa*Cao + Nao**HNa*Ca_SL)
##i_NaCa = i_NaCa_jct + i_NaCa_SL
##monitor(i_NaCa)   
##
##component("Icap")
##Q_SLCaP = Q10_SLCaP**((T - 310)/ten)
##i_Cap_jct = Q_SLCaP*V_maxAF*Fx_SLCaP_jct/(one + (Km/Ca_jct)**H)
##i_Cap_SL = Q_SLCaP*V_maxAF*Fx_SLCaP_SL/(one + (Km/Ca_SL)**H)
##i_Cap = i_Cap_jct + i_Cap_SL
##
##component("Icab")
##i_Cab_jct = G_CaBk*Fx_CaBk_jct*(V - E_Ca_jct)
##i_Cab_SL = G_CaBk*Fx_CaBk_SL*(V - E_Ca_SL)
##i_Cab = i_Cab_SL + i_Cab_jct
##
##component("Jrel sr")
##kCaSR = Max_SR - (Max_SR - Min_SR)/(one + (EC50_SR/Ca_SR)**HSR)
##koSRCa = koCa/kCaSR
##kiSRCa = kiCa*kCaSR
##RI = one - R - O - I
##j_rel_SR = ks*O*(Ca_SR - Ca_jct)
##monitor(j_rel_SR)
##
##component("Jleak sr")
##j_leak_SR = KSRleak*(Ca_SR - Ca_jct)
##
##component("Jpump sr")
##Q_SRCaP = Q10_SRCaP**((T - 310)/ten)
##j_pump_SR = Q_SRCaP*V_max_Jpump*((Cai/Kmf)**H_Jpump - (Ca_SR/Kmr)**H_Jpump)/(one + (Cai/Kmf)**H_Jpump + (Ca_SR/Kmr)**H_Jpump)
##monitor(j_pump_SR)
##
##component("Ion diffusion")
##J_Na_jct_SL = (Na_jct - Na_SL)*1.8313e-14
##J_Na_SL_myo = (Na_SL - Nai)*1.6386e-12
##J_Ca_jct_SL = (Ca_jct - Ca_SL)*8.2413e-13
##J_Ca_SL_myo = (Ca_SL - Cai)*3.7243e-12
##
##component("Cytosolic ca buffer")
##dCa_TroponinC = kon_TroponinC*Cai*(Bmax_TroponinC - Ca_TroponinC) - koff_TroponinC*Ca_TroponinC
##dCa_TroponinC_Ca_Mg = kon_TroponinC_Ca_Mg_Ca*Cai*(Bmax_TroponinC_Ca_Mg_Ca - (Ca_TroponinC_Ca_Mg + Mg_TroponinC_Ca_Mg)) - koff_TroponinC_Ca_Mg_Ca*Ca_TroponinC_Ca_Mg
##dMg_TroponinC_Ca_Mg = kon_TroponinC_Ca_Mg_Mg*Mgi*(Bmax_TroponinC_Ca_Mg_Mg - (Ca_TroponinC_Ca_Mg + Mg_TroponinC_Ca_Mg)) - koff_TroponinC_Ca_Mg_Mg*Mg_TroponinC_Ca_Mg
##dCa_Calmodulin = kon_Calmodulin*Cai*(Bmax_Calmodulin - Ca_Calmodulin) - koff_Calmodulin*Ca_Calmodulin
##dCa_Myosin = kon_Myosin_Ca*Cai*(Bmax_Myosin_Ca - (Ca_Myosin + Mg_Myosin)) - koff_Myosin_Ca*Ca_Myosin
##dMg_Myosin = kon_Myosin_Mg*Mgi*(Bmax_Myosin_Mg - (Ca_Myosin + Mg_Myosin)) - koff_Myosin_Mg*Mg_Myosin
##dCa_SRB = kon_SRB*Cai*(Bmax_SRB - Ca_SRB) - koff_SRB*Ca_SRB
##dCa_cytosol_tot_bound = dCa_TroponinC + dCa_TroponinC_Ca_Mg + dMg_TroponinC_Ca_Mg + dCa_Calmodulin + dCa_Myosin + dMg_Myosin + dCa_SRB
##
##component("Ikr")
##G_IKr = 0.03*sqrt(Ko/5.4)
##i_Kr = G_IKr*Xr*Rr*(V - E_K)
##
##component("Ik1")
##G_K1 = 0.9*sqrt(Ko/5.4)
##i_K1 = G_K1*K1_infinity*(V - E_K)

component("Ical")
Q_CaL = Q10_CaL**((T - 310)/ten)
temp = 0.45*d*f*Q_CaL*V*F**two/(Rgas*T)
i_CaL_Ca_jct = temp*fCa_jct*Fx_ICaL_jct*PCa*four*(gamma_Cai*Ca_jct*exp(two*V*F/(Rgas*T)) - gamma_Cao*Cao)/(exp(two*V*F/(Rgas*T)) - one)
i_CaL_Na_jct = temp*fCa_jct*Fx_ICaL_jct*PNa*(gamma_Nai*Na_jct*exp(V*F/(Rgas*T)) - gamma_Nao*Nao)/(exp(V*F/(Rgas*T)) - one)
i_CaL_Ca_SL = temp*fCa_SL*Fx_ICaL_SL*PCa*four*(gamma_Cai*Ca_SL*exp(two*V*F/(Rgas*T)) - gamma_Cao*Cao)/(exp(two*V*F/(Rgas*T)) - one)
i_CaL_Na_SL = temp*fCa_SL*Fx_ICaL_SL*PNa*(gamma_Nai*Na_SL*exp(V*F/(Rgas*T)) - gamma_Nao*Nao)/(exp(V*F/(Rgas*T)) - one)
i_CaL_K = temp*(fCa_SL*Fx_ICaL_SL + fCa_jct*Fx_ICaL_jct)*PK*(gamma_Ki*Ki*exp(V*F/(Rgas*T)) - gamma_Ko*Ko)/(exp(V*F/(Rgas*T)) - one)
# All 
i_CaL = i_CaL_Ca_SL + i_CaL_Ca_jct + i_CaL_Na_SL + i_CaL_Na_jct + i_CaL_K
# Cal dep only 
#i_CaL = i_CaL_Ca_SL + i_CaL_Ca_jct 
monitor(i_CaL)    

##component("Na buffer")
##dNa_jct_buf = kon*Na_jct*(Bmax_jct - Na_jct_buf) - koff*Na_jct_buf
##dNa_SL_buf = kon*Na_SL*(Bmax_SL - Na_SL_buf) - koff*Na_SL_buf
##
##component("Ca buffer")
##dCalsequestrin = kon_Calsequestrin*Ca_SR*(Bmax_Calsequestrin*Vol_myo/Vol_SR - Ca_Calsequestrin) - koff_Calsequestrin*Ca_Calsequestrin
##dCa_SLB_SL = kon_SL*Ca_SL*(Bmax_SLB_SL*Vol_myo/Vol_SL - Ca_SLB_SL) - koff_SLB*Ca_SLB_SL
##dCa_SLB_jct = kon_SL*Ca_jct*(Bmax_SLB_jct*0.1*Vol_myo/Vol_jct - Ca_SLB_jct) - koff_SLB*Ca_SLB_jct
##dCa_SLHigh_SL = kon_SL*Ca_SL*(Bmax_SLHigh_SL*Vol_myo/Vol_SL - Ca_SLHigh_SL) - koff_SLHigh*Ca_SLHigh_SL
##dCa_SLHigh_jct = kon_SL*Ca_jct*(Bmax_SLHigh_jct*0.1*Vol_myo/Vol_jct - Ca_SLHigh_jct) - koff_SLHigh*Ca_SLHigh_jct
##dCa_jct_tot_bound = dCa_SLB_jct + dCa_SLHigh_jct
##dCa_SL_tot_bound = dCa_SLB_SL + dCa_SLHigh_SL
##i_Ca_jct_tot = i_CaL_Ca_jct - two*i_NaCa_jct + i_Cab_jct + i_Cap_jct
##i_Ca_SL_tot = i_CaL_Ca_SL - two*i_NaCa_SL + i_Cab_SL + i_Cap_SL
##
##component("Cell")
##i_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, stim_start), Le(time - floor(time/stim_period)*stim_period, stim_start + stim_duration), ), -stim_amplitude, 0)
##monitor(i_Stim)   
##
comment("The ODE system: 39 states")
##dh_dt = alpha_h*(one - h) - beta_h*h
##dj_dt = alpha_j*(one - j) - beta_j*j
##dm_dt = alpha_m*(one - m) - beta_m*m
##dXr_dt = (Xr_infinity - Xr)/tau_Xr
##dXs_dt = (Xs_infinity - Xs)/tau_Xs
##dX_tos_dt = (X_tos_infinity - X_tos)/tau_X_tos
##dY_tos_dt = (Y_tos_infinity - Y_tos)/tau_Y_tos
##dR_tos_dt = (R_tos_infinity - R_tos)/tau_R_tos
##dX_tof_dt = (X_tof_infinity - X_tof)/tau_X_tof
##dY_tof_dt = (Y_tof_infinity - Y_tof)/tau_Y_tof
dd_dt = (d_infinity - d)/tau_d
df_dt = (f_infinity - f)/tau_f
dfCaB_SL_dt = 1.7*Ca_SL*(one - fCaB_SL) - 11.9e-3*fCaB_SL
dfCaB_jct_dt = 1.7*Ca_jct*(one - fCaB_jct) - 11.9e-3*fCaB_jct
##dR_dt = kim*RI - kiSRCa*Ca_jct*R - (koSRCa*Ca_jct**two*R - kom*O)
##dO_dt = koSRCa*Ca_jct**two*R - kom*O - (kiSRCa*Ca_jct*O - kim*I)
##dI_dt = kiSRCa*Ca_jct*O - kim*I - (kom*I - koSRCa*Ca_jct**two*RI)
##dCa_TroponinC_dt = dCa_TroponinC
##dCa_TroponinC_Ca_Mg_dt = dCa_TroponinC
##dMg_TroponinC_Ca_Mg_dt = dMg_TroponinC_Ca_Mg
##dCa_Calmodulin_dt = dCa_Calmodulin
##dCa_Myosin_dt = dCa_Myosin
##dMg_Myosin_dt = dMg_Myosin
##dCa_SRB_dt = dCa_SRB
##dNa_jct_buf_dt = dNa_jct_buf
##dNa_SL_buf_dt = dNa_SL_buf
##dNa_jct_dt = -Cm*(i_Na_jct + three*i_NaCa_jct + i_Nab_jct + three*i_NaK_jct + i_CaL_Na_jct)/(Vol_jct*F) - J_Na_jct_SL/Vol_jct - dNa_jct_buf
##dNa_SL_dt = -Cm*(i_Na_SL + three*i_NaCa_SL + i_Nab_SL + three*i_NaK_SL + i_CaL_Na_SL)/(Vol_SL*F) + (J_Na_jct_SL - J_Na_SL_myo)/Vol_SL - dNa_SL_buf
##dNai_dt = J_Na_SL_myo/Vol_myo
##dCa_Calsequestrin_dt = dCalsequestrin
##dCa_SLB_SL_dt = dCa_SLB_SL
##dCa_SLB_jct_dt = dCa_SLB_jct
##dCa_SLHigh_SL_dt = dCa_SLHigh_SL
##dCa_SLHigh_jct_dt = dCa_SLHigh_jct
##dCa_SR_dt = j_pump_SR - (j_leak_SR*Vol_myo/Vol_SR + j_rel_SR) - dCalsequestrin
##dCa_jct_dt = -i_Ca_jct_tot*Cm/(Vol_jct*two*F) - J_Ca_jct_SL/Vol_jct + j_rel_SR*Vol_SR/Vol_jct + j_leak_SR*Vol_myo/Vol_jct - one*dCa_jct_tot_bound
##dCa_SL_dt = -i_Ca_SL_tot*Cm/(Vol_SL*two*F) + (J_Ca_jct_SL - J_Ca_SL_myo)/Vol_SL - one*dCa_SL_tot_bound
##dCai_dt = -j_pump_SR*Vol_SR/Vol_myo + J_Ca_SL_myo/Vol_myo - one*dCa_cytosol_tot_bound
##dV_dt = -(i_Na + i_Nab + i_NaK + i_Kr + i_Ks + i_tos + i_tof + i_K1 + i_NaCa + i_Cl_Ca + i_Clb + i_CaL + i_Cab + i_Cap + i_Kp + i_Stim)
